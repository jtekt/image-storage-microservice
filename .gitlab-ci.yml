stages:
  - test
  - build


variables:
  APPLICATION_NAME: image-storage

  CONTAINER_IMAGE_TEST: ${APPLICATION_NAME}:test

  CONTAINER_TAG: ${CI_COMMIT_SHORT_SHA}
  CONTAINER_TAG_AARCH64: aarch64-${CI_COMMIT_SHORT_SHA}

  CONTAINER_IMAGE: ${CONTAINER_REGISTRY}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CONTAINER_TAG}
  CONTAINER_IMAGE_AARCH64: ${CONTAINER_IMAGE}:${CONTAINER_TAG_AARCH64}

  CONTAINER_IMAGE_DOCKER_HUB: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  CONTAINER_IMAGE_DOCKER_HUB_TAGGED: ${CONTAINER_IMAGE_DOCKER_HUB}:${CONTAINER_TAG}
  CONTAINER_IMAGE_DOCKER_HUB_AARCH64: ${CONTAINER_IMAGE_DOCKER_HUB}:${CONTAINER_TAG_AARCH64}

  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CONTAINER_TAG}
  CONTAINER_IMAGE_DOCKER_HUB: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  CONTAINER_IMAGE_DOCKER_HUB_TAGGED: ${CONTAINER_IMAGE_DOCKER_HUB}:${CONTAINER_TAG}

image: moreillon/tdd-dind
services:
  - name: docker:19.03.12-dind
    command: ["--insecure-registry=172.16.98.151:5000"]


test:
  stage: test
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  only:
    - master
  tags:
    - dind
  before_script:
    # Creating network for TDD
    - docker network create tdd
    # Creating DB container in network
    - >
      docker run --rm -d
      --name tdd-db
      --network tdd
      --hostname tdd-db
      mongo

  script:
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    # Run test
    - >
      docker run
      --rm
      --name tdd-app
      --network tdd
      -e MONGODB_URL=mongodb://tdd-db
      ${CONTAINER_IMAGE_TEST}
      npm run coverage

x86:
  stage: build
  tags:
    - dind
  only:
    - master
  before_script:
    - >
      echo "${DOCKER_HUB_PASSWORD}"
      | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin
  script:
    # Building image
    - docker build -t ${CONTAINER_IMAGE} .
    # Tagging image
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_TAGGED}
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}
    # Pushing images
    - docker push ${CONTAINER_IMAGE}
    - docker push ${CONTAINER_IMAGE_TAGGED}
    - docker push ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker push ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE}
    - docker image rm ${CONTAINER_IMAGE_TAGGED}
    - docker image rm ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker image rm ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}

aarch64:
  stage: build
  tags:
    - aarch64
  only:
    - master
  before_script:
    - >
      echo "${DOCKER_HUB_PASSWORD}"
      | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin
  script:
    - >
      docker build
      --build-arg HTTP_PROXY=http://172.16.98.151:8118
      --build-arg HTTPS_PROXY=http://172.16.98.151:8118
      -t ${CONTAINER_IMAGE_AARCH64} .
    # Tagging image
    - docker tag ${CONTAINER_IMAGE_AARCH64} ${CONTAINER_IMAGE_DOCKER_HUB_AARCH64}
    # Pushing
    - docker push ${CONTAINER_IMAGE_AARCH64}
    - docker push ${CONTAINER_IMAGE_DOCKER_HUB_AARCH64}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE_AARCH64}
    - docker image rm ${CONTAINER_IMAGE_DOCKER_HUB_AARCH64}
