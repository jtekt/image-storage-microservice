stages:
  - build

variables:
  APPLICATION_NAME: image-storage
  CONTAINER_TAG: ${CI_COMMIT_SHORT_SHA}
  CONTAINER_IMAGE: ${CONTAINER_REGISTRY}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TEST: ${CONTAINER_IMAGE}:test
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CONTAINER_TAG}
  CONTAINER_IMAGE_DOCKER_HUB: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  CONTAINER_IMAGE_DOCKER_HUB_TAGGED: ${CONTAINER_IMAGE_DOCKER_HUB}:${CONTAINER_TAG}

# Building application for X86 plattforms
x86:
  stage: build
  tags:
    - "x86"
  script:
    # Docker hub login
    - >
      echo "${DOCKER_HUB_PASSWORD}"
      | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin
    # Building image
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    - docker push ${CONTAINER_IMAGE_TEST}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE_TEST}


# Building application for X86 plattforms
test:
  stage: test
  only:
    - master
  tags:
    - dind
  before_script:
    # Docker hub login
    - >
      echo "${DOCKER_HUB_PASSWORD}"
      | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin
    # Creating network for TDD
    - docker network create ${TEST_NETWORK}
    # Creating DB container in network
    - >
      docker run --rm -d
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      mongo

  script:
    # Run test
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      -e MONGODB_URL=mongodb://${TEST_DB}
      ${CONTAINER_IMAGE_TEST}
      npm run test
    # Tag
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_TAGGED}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}
    # Pushing images
    - docker push ${CONTAINER_IMAGE}
    - docker push ${CONTAINER_IMAGE_TAGGED}
    - docker push ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker push ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE}
    - docker image rm ${CONTAINER_IMAGE_TAGGED}
    - docker image rm ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker image rm ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}

# Building application for ARM (64bit) plattforms
aarch64:
  stage: build
  tags:
    - "aarch64"
  script:
    - >
      docker build
      --build-arg HTTP_PROXY=http://172.16.98.151:8118
      --build-arg HTTPS_PROXY=http://172.16.98.151:8118
      -t ${CONTAINER_IMAGE}-aarch64 .
    - docker push ${CONTAINER_IMAGE}-aarch64
