stages:
  - build
  - test

image: moreillon/tdd-dind

services:
  - name: docker:19.03.12-dind
    command: ["--insecure-registry=172.16.98.151:5000"]

variables:
  APPLICATION_NAME: image-storage-service

  AWS_ECR_PUBLIC_URL: public.ecr.aws/u6l4m3e5

  CONTAINER_IMAGE: ${AWS_ECR_PUBLIC_URL}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TEST: ${CONTAINER_IMAGE}:test
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CI_COMMIT_SHORT_SHA}

  CONTAINER_IMAGE_DOCKER_HUB: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  CONTAINER_IMAGE_DOCKER_HUB_TAGGED: ${CONTAINER_IMAGE_DOCKER_HUB}:${CI_COMMIT_SHORT_SHA}

  TEST_NETWORK: tdd
  TEST_DB: tdd-db


build-x86:
  stage: build
  only:
    - master
    - mongoose
  tags:
    - dind
  before_script:
    # Docker Hub login
    - echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin ;
    # Create repository in ECR if it does not exist yet
    # - >
    #   aws ecr create-repository --repository-name ${APPLICATION_NAME}
    #   || echo "Repository might have already existed"
    # Log in to the registry (AWS credentials are stored as GitLab CI/CD env variables)
    - >
      aws ecr-public get-login-password --region us-east-1
      | docker login
      --username AWS
      --password-stdin
      ${AWS_ECR_PUBLIC_URL}

  script:
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    - docker push ${CONTAINER_IMAGE_TEST}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE_TEST}


test:
  stage: test
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  only:
    - master
    - mongoose
  tags:
    - dind
  before_script:
    - echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin;
    # Creating network for TDD
    - docker network create ${TEST_NETWORK}
    # Creating DB container in network
    - >
      docker run --rm -d
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      mongo

  script:
    # Run tests
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      -e MONGODB_URL=mongodb://${TEST_DB}
      ${CONTAINER_IMAGE_TEST}
      npm run coverage
    # Tag
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_TAGGED}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}
    # Push
    - docker push ${CONTAINER_IMAGE}
    - docker push ${CONTAINER_IMAGE_TAGGED}
    - docker push ${CONTAINER_IMAGE_DOCKER_HUB}
    - docker push ${CONTAINER_IMAGE_DOCKER_HUB_TAGGED}
