stages:
  - test
  - build

image: moreillon/tdd-dind
services:
  - name: docker:19.03.12-dind

variables:
  APPLICATION_NAME: image-storage-service
  AWS_ECR_PUBLIC_URL: public.ecr.aws/u6l4m3e5

  CONTAINER_IMAGE: ${AWS_ECR_PUBLIC_URL}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CI_COMMIT_SHORT_SHA}
  CONTAINER_IMAGE_AARCH64: ${CONTAINER_IMAGE}:aarch64-${CI_COMMIT_SHORT_SHA}

  CONTAINER_IMAGE_TEST: ${APPLICATION_NAME}:test

  TEST_NETWORK: tdd
  TEST_DB: tdd-db




test:
  stage: test
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  only:
    - master
    - mongoose
  tags:
    - dind
  before_script:
    # Creating network for TDD
    - docker network create ${TEST_NETWORK}
    # Creating DB container in network
    - >
      docker run --rm -d
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      mongo

  script:
    # Building test image
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    # Run tests
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      -e MONGODB_URL=mongodb://${TEST_DB}
      ${CONTAINER_IMAGE_TEST}
      npm run coverage



build-x86:
  stage: build
  only:
    - master
    - mongoose
  tags:
    - dind
  before_script:
    # Log in to the registry (AWS credentials are stored as GitLab CI/CD env variables)
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_PUBLIC_URL}
  script:
    - docker build -t ${CONTAINER_IMAGE} .
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_TAGGED}
    - docker push ${CONTAINER_IMAGE}
    - docker push ${CONTAINER_IMAGE_TAGGED}


build-aarch64:
  stage: build
  tags:
    - aarch64
  only:
    - master
  before_script:
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ECR_PUBLIC_URL}
  script:
  - docker build -t ${CONTAINER_IMAGE_AARCH64} .
  - docker push ${CONTAINER_IMAGE_AARCH64}
