stages:
  - build
  - test



variables:
  APPLICATION_NAME: image-storage-mongoose
  CONTAINER_IMAGE: ${CONTAINER_REGISTRY}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TEST: ${CONTAINER_IMAGE}:test
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CI_COMMIT_SHORT_SHA}
  CONTAINER_IMAGE_DOCKER_HUB: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  TEST_NETWORK: tdd
  TEST_DB: tdd-db

services:
  - docker:19.03.12-dind
    command: ["--insecure-registry=${CONTAINER_REGISTRY}"]

build-x86:
  stage: build
  only:
    - master
  tags:
    - dind
  script:
    # - >
    #  if [ -z ${DOCKER_HUB_USERNAME} ];
    #  then echo "No Docker login" -;
    #  else echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin ;
    #  fi
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    - docker push ${CONTAINER_IMAGE_TEST}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE_TEST}


# Building application for X86 plattforms
test:
  stage: test
  only:
    - master
  tags:
    - dind
  before_script:
    # Creating network for TDD
    - >
      if [ -z "$(docker network ls | grep ${TEST_NETWORK})" ];
      then docker network create ${TEST_NETWORK};
      else echo "Network ${TEST_NETWORK} already existed";
      fi
    # Creating DB container in network
    - >
      docker run --rm -d
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      mongo

  script:
    # Run test
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      -e MONGODB_URL=mongodb://${TEST_DB}
      ${CONTAINER_IMAGE_TEST}
      npm run test
    # Tag
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_TAGGED}
    # Push
    - docker push ${CONTAINER_IMAGE}
    - docker push ${CONTAINER_IMAGE_TAGGED}
    # Cleanup
    - docker image rm ${CONTAINER_IMAGE}
    - docker image rm ${CONTAINER_IMAGE_TAGGED}

  after_script:
    # Remove database and network
    - docker container stop ${TEST_DB}
    - >
      if [ -n "$(docker network ls | grep ${TEST_NETWORK})" ];
      then docker network rm ${TEST_NETWORK};
      else echo "Network ${TEST_NETWORK} did not exist";
      fi
