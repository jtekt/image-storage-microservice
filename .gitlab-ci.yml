stages:
  # - build
  - test

variables:
  APPLICATION_NAME: image-storage-mongoose
  CONTAINER_IMAGE: ${CONTAINER_REGISTRY}/${APPLICATION_NAME}
  CONTAINER_IMAGE_DOCKER_HUB: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  TEST_NETWORK: tdd
  TEST_DB: tdd-db

# build-x86:
#   stage: build
#   only:
#     - master
#   tags:
#     - x86
#   script:
#     # - >
#     #  if [ -z ${DOCKER_HUB_USERNAME} ];
#     #  then echo "No Docker login" -;
#     #  else echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin ;
#     #  fi
#     - docker build -t ${CONTAINER_IMAGE} .
#     - docker push ${CONTAINER_IMAGE}
#     # Cleanup
#     - docker image rm ${CONTAINER_IMAGE}


# Building application for X86 plattforms
test:
  stage: test
  only:
    - master
  tags:
    - x86
  before_script:
    # Creating network for TDD
    # Cannot use env vars in grep??
    - >
      if [ -z "$(docker network ls | grep ${TEST_NETWORK})" ];
      then docker network create ${TEST_NETWORK};
      else echo "Network ${TEST_NETWORK} already existed";
      fi
    - echo "Deploying test database ${TEST_DB}"
    - >
      docker run --rm -d
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      mongo
    - echo "Database is up"
  script:
    # Run test
    - >
      docker run --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      -e MONGODB_URL=mongodb://${TEST_DB}
      ${CONTAINER_IMAGE} npm run test
  after_script:
    # Remove database and network
    - echo "Stopping test database ${TEST_DB}"
    - docker container stop ${TEST_DB}
    - echo "Stopped test database ${TEST_DB}"
    - echo Removing network ${TEST_NETWORK} if it exists
    - >
      if [ -n "$(docker network ls | grep ${TEST_NETWORK})" ];
      then docker network rm ${TEST_NETWORK};
      else echo "Network ${TEST_NETWORK} did not exist";
      fi
